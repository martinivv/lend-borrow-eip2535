{
  "address": "0xc5FF7DF6Ab6621691D52829aD176BC18b0331Fd9",
  "abi": [
    {
      "inputs": [],
      "name": "TooManyFunctionsInAFacet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "_facetFunctionSelectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupeFacet.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d990e1f38e9a18ba7e681e9466aa0adcd07680e1f88ad38c9573b2d36a932df",
  "receipt": {
    "to": null,
    "from": "0x8dfD6AE6d263262da0E4a2634d899a0085923Fbc",
    "contractAddress": "0xc5FF7DF6Ab6621691D52829aD176BC18b0331Fd9",
    "transactionIndex": 40,
    "gasUsed": "678825",
    "logsBloom": "0x
    "blockHash": "0xb8a6455edd8dadb695ce6adff7d4da06e0d579bc8a4a2eeb01a2e924db974db6",
    "transactionHash": "0x6d990e1f38e9a18ba7e681e9466aa0adcd07680e1f88ad38c9573b2d36a932df",
    "logs": [],
    "blockNumber": 4624240,
    "cumulativeGasUsed": "6184442",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3ace87e0080de70e4c37f388c527e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TooManyFunctionsInAFacet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_facetFunctionSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupeFacet.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:version\":\"0.0.1\",\"kind\":\"dev\",\"methods\":{\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"{address[]}\"}},\"facetFunctionSelectors(address)\":{\"returns\":{\"_facetFunctionSelectors\":\"{bytes4[]}\"}},\"facets()\":{\"returns\":{\"facets_\":\"{Facet[]}\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise\"}}},\"title\":\"DiamondLoupeFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the @return facetAddress_ that supports given @param _functionSelector\"},\"facetAddresses()\":{\"notice\":\"Gets all facet addresses used by a diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific @param _facet\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"notice\":\"Declares related functions that tell you what functions and facets are provided by the diamond\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/diamond/facets/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":600},\"remappings\":[]},\"sources\":{\"src/contracts/diamond/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity =0.8.20;\\n\\nimport {IDiamondLoupeFacet} from \\\"../interfaces/IDiamondLoupeFacet.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {DiamondState, d} from \\\"../libraries/DiamondState.sol\\\";\\nimport {DiamondErrors} from \\\"../../helpers/Errors.sol\\\";\\n\\n/// @title DiamondLoupeFacet\\n/// @notice Declares related functions that tell you what functions and facets are provided by the diamond\\n/// @custom:version 0.0.1\\ncontract DiamondLoupeFacet is IDiamondLoupeFacet, IERC165 {\\n    /// @inheritdoc IDiamondLoupeFacet\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        DiamondState storage ds = d();\\n\\n        facets_ = new Facet[](ds.selectorCount);\\n        uint16[] memory numFacetSelectors = new uint16[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) break;\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n\\n                        if (numFacetSelectors[facetIndex] > 254) revert DiamondErrors.TooManyFunctionsInAFacet();\\n\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) continue;\\n\\n                facets_[numFacets].facetAddress = facetAddress_;\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @inheritdoc IDiamondLoupeFacet\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view override returns (bytes4[] memory _facetFunctionSelectors) {\\n        DiamondState storage ds = d();\\n\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) break;\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @inheritdoc IDiamondLoupeFacet\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n        DiamondState storage ds = d();\\n\\n        facetAddresses_ = new address[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) break;\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) continue;\\n\\n                facetAddresses_[numFacets] = facetAddress_;\\n                numFacets++;\\n            }\\n        }\\n\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @inheritdoc IDiamondLoupeFacet\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n        facetAddress_ = address(bytes20(d().facets[_functionSelector]));\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n        return d().supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0xac67af54b18c4667cd66899b7846bb5ff606b7ec6b18f4103e937acb83b44b63\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IDiamondCutFacet\\n/// @notice Interface that allows modifications to diamond function selector mapping\\ninterface IDiamondCutFacet {\\n    /// @notice Struct used as a mapping of facet to function selectors\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Available diamond operations\\n    /// @dev Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    /// @notice Emitted when facet selectors are modified\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Adds/replaces/removes any number of functions and optionally executes\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute `_calldata`\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// @dev Be aware that `_calldata` is executed with delegatecall on the `_init` contract\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x3acf0660b6a64d0e066525a914763149d9efe9be92ee16e5ce90acd5a1b09009\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IDiamondLoupeFacet\\ninterface IDiamondLoupeFacet {\\n    /// @notice Used with {facets} to return all facet addresses and their four byte function selectors\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facets and their selectors\\n    /// @return facets_ {Facet[]}\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific @param _facet\\n    /// @return facetFunctionSelectors_ {bytes4[]}\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Gets all facet addresses used by a diamond\\n    /// @return facetAddresses_ {address[]}\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the @return facetAddress_ that supports given @param _functionSelector\\n    /// @custom:advice Consider implementing better error handling if the facet is not found\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x8e7796733e14e043e3bafae0c4420bb7680886684bd49465c12f49e1c743ee13\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IERC165\\n/// @notice The interface introduces support of contract interfaces, which can then be queried\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceID` and\\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b3a450a6e9f019b305cbf73180fa3b4a409327a4af7b3d6477911307badbf49\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {LibDiamondCut} from \\\"./logic/LibDiamondCut.sol\\\";\\nimport {LibDiamondOwnership} from \\\"./logic/LibDiamondOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibDiamondOwnership for DiamondState global;\\n\\n/// @notice Struct defining the current diamond state\\n/// @custom:advice Consider creating a library with \\\"generic\\\" functions related to `DiamondState`\\nstruct DiamondState {\\n    /// @notice Function selector -> address facet and selector positions\\n    mapping(bytes4 => bytes32) facets;\\n    /// @notice Array of slots of function selectors, each slot holds 8 function selectors\\n    mapping(uint256 => bytes32) selectorSlots;\\n    /// @notice The number of function selectors in `selectorSlots`\\n    uint16 selectorCount;\\n    /// @notice ERC-165 implementation; query if a contract implements an interface\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /// @notice The owner of the Diamond contract\\n    address contractOwner;\\n}\\n\\n// ======================== Pointer ================================================================\\n\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"martinivv.diamond.storage\\\");\\n\\n/// @notice Used as a shared storage\\n/// @return ds Storage pointer to `DiamondState` struct\\nfunction d() pure returns (DiamondState storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n\\n    assembly {\\n        ds.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x134f91bbed10b47ed90a102ccbb176c45e8d67521b28aacf6656d40e084cb3b6\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/logic/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable code-complexity\\n// solhint-disable custom-errors\\n\\npragma solidity =0.8.20;\\n\\nimport {IDiamondCutFacet} from \\\"../../interfaces/IDiamondCutFacet.sol\\\";\\nimport {DiamondState, d} from \\\"../DiamondState.sol\\\";\\n// Consider adding remappings\\nimport {DiamondEvents} from \\\"../../../helpers/Events.sol\\\";\\nimport {DiamondErrors} from \\\"../../../helpers/Errors.sol\\\";\\nimport {DiamondConstants} from \\\"../../../helpers/Constants.sol\\\";\\n\\n/// @notice See {diamondCut}'s @notice\\n/// @custom:security Will behave like an internal function of the calling contract\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) return;\\n\\n    LibDiamondCut.enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n        if (error.length > 0) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(error)\\n                revert(add(32, error), returndata_size)\\n            }\\n        } else {\\n            revert DiamondErrors.InitializationFunctionReverted(_init, _calldata);\\n        }\\n    }\\n}\\n\\n/// @title LibDiamondCut\\n/// @notice Internal function versions of `DiamondCutFacet` ones\\n/// @dev This code is almost the same as the external `DiamondCutFacet` one,\\n/// except it is using `Facet[] memory _diamondCut` instead of\\n/// `Facet[] calldata _diamondCut`. The code is duplicated to prevent\\n/// copying calldata to memory which causes an error for a two dimensional array\\nlibrary LibDiamondCut {\\n    /// @notice Adds/replaces/removes any number of functions and optionally executes\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute `_calldata`\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// @dev Be aware that `_calldata` is executed with delegatecall on the `_init` contract\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        uint256 originalSelectorCount = self.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n\\n        if (selectorCount & 7 > 0) selectorSlot = self.selectorSlots[selectorCount >> 3];\\n\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n\\n        if (selectorCount != originalSelectorCount) self.selectorCount = uint16(selectorCount);\\n\\n        if (selectorCount & 7 > 0) self.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\n        emit DiamondEvents.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    /// @notice See {diamondCut}'s @notice\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCutFacet.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondState storage self = d();\\n\\n        if (_selectors.length < 1) revert DiamondErrors.NoSelectorFound();\\n\\n        if (_action == IDiamondCutFacet.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = self.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0)) revert DiamondErrors.FunctionAlreadyExists();\\n\\n                self.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                _selectorSlot =\\n                    (_selectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                if (selectorInSlotPosition == 224) {\\n                    self.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCutFacet.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = self.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(this)) revert DiamondErrors.ImmutableFunctionDetected();\\n\\n                if (oldFacetAddress == _newFacetAddress) revert DiamondErrors.CannotReplaceTheSameFunction();\\n\\n                if (oldFacetAddress == address(0)) revert DiamondErrors.FunctionDoesNotExist();\\n\\n                self.facets[selector] = (oldFacet & DiamondConstants.CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCutFacet.FacetCutAction.Remove) {\\n            if (_newFacetAddress != address(0)) revert DiamondErrors.MustBeZeroAddress(_newFacetAddress);\\n\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    _selectorSlot = self.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = self.facets[selector];\\n                    if (address(bytes20(oldFacet)) == address(0)) revert DiamondErrors.FunctionDoesNotExist();\\n\\n                    if (address(bytes20(oldFacet)) == address(this)) revert DiamondErrors.ImmutableFunctionDetected();\\n\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\n                    if (lastSelector != selector) {\\n                        self.facets[lastSelector] =\\n                            (oldFacet & DiamondConstants.CLEAR_ADDRESS_MASK) |\\n                            bytes20(self.facets[lastSelector]);\\n                    }\\n\\n                    delete self.facets[selector];\\n\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = self.selectorSlots[oldSelectorsSlotCount];\\n\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    self.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete self.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert DiamondErrors.IncorrectFacetCutAction(uint8(_action));\\n        }\\n\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    /// @notice Ensures that the @param _contract has code, otherwise throws an @param _errorMessage\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x35d9df95b89c58f00c599f6fea6b6d7d7192428a16e2eb7f6362e6765ac68844\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/logic/LibDiamondOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\nimport {DiamondErrors} from \\\"../../../helpers/Errors.sol\\\";\\n\\n/// @title LibDiamondOwnership\\n/// @notice Library collection of diamond ownership functions\\nlibrary LibDiamondOwnership {\\n    /// @notice Emitted when diamond owner is updated\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Updates the diamond owner to @param _newOwner's address\\n    function setContractOwner(DiamondState storage self, address _newOwner) internal {\\n        address previousOwner = self.contractOwner;\\n        self.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    /// @notice Returns the diamond @return contractOwner_'s address\\n    function getContractOwner(DiamondState storage self) internal view returns (address contractOwner_) {\\n        contractOwner_ = self.contractOwner;\\n    }\\n\\n    /// @notice Checks if `msg.sender` is the diamond owner\\n    function enforceIsContractOwner(DiamondState storage self) internal view {\\n        if (msg.sender != self.contractOwner) revert DiamondErrors.MustBeDiamondOwner(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xd3f4d72fea315ac0781dfc55f5f2b9d8e11262d360f7578ef591228cc385b8d0\",\"license\":\"MIT\"},\"src/contracts/domain/interfaces/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IAggregatorV3\\n/// @notice This interface enables utilization of Chainlink data feeds\\ninterface IAggregatorV3 {\\n    /// @notice Returns the number of decimals in the response\\n    /// @return {uint8}\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Gets data from the latest round\\n    /// @return roundId The round ID\\n    /// @return answer The data that this specific feed provides\\n    /// @return startedAt Timestamp of when the round started\\n    /// @return updatedAt Timestamp of when the round was updated\\n    /// @return answeredInRound Deprecated. Previously used when answers could take multiple rounds to be computed\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xf6e216dc33b61ef00f056ccd84e6a9ced64db2dd98a604cafbc5193978485bd2\",\"license\":\"MIT\"},\"src/contracts/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n// solhint-disable state-visibility\\n\\npragma solidity =0.8.20;\\n\\n/// @title DiamondConstants\\n/// @notice Constants used all around the Diamond logic\\nlibrary DiamondConstants {\\n    /// @notice Diamond's property\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    /// @notice Diamond's property\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n}\\n\\n/// @title DomainConstants\\n/// @notice Constants used all around the Domain logic\\nlibrary DomainConstants {\\n    /// @notice Used for handling calculations with basis points\\n    uint256 constant BASIS_POINTS = 10_000;\\n    /// @notice One day in seconds\\n    uint256 constant SECONDS_PER_DAY = 1 days;\\n    /// @notice Days in a year. Yeap years are ignored\\n    uint256 constant DAYS_PER_YEAR = 365;\\n    /// @notice ReentrancyGuard's property\\n    uint256 constant _NOT_ENTERED = 1;\\n    /// @notice ReentrancyGuard's property\\n    uint256 constant _ENTERED = 2;\\n}\\n\",\"keccak256\":\"0xa91d9468a2376c940149c6d99e6cacd92a78bf16d90d3fae43dbb1789f9b1028\",\"license\":\"MIT\"},\"src/contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n\\npragma solidity =0.8.20;\\n\\nimport {IAggregatorV3} from \\\"../domain/interfaces/IAggregatorV3.sol\\\";\\n\\n/// @title DiamondErrors\\n/// @notice Errors used all around the Diamond logic\\nlibrary DiamondErrors {\\n    error FunctionDoesNotExist();\\n    error TooManyFunctionsInAFacet();\\n    error NoZeroAddressOwner();\\n    error NoSelectorFound();\\n    error FunctionAlreadyExists();\\n    error ImmutableFunctionDetected();\\n    error CannotReplaceTheSameFunction();\\n    error MustBeZeroAddress(address _newFacetAddress);\\n    error IncorrectFacetCutAction(uint8 _actionNum);\\n    error InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n    error MustBeDiamondOwner(address _caller);\\n    error TransferFailed();\\n}\\n\\n/// @title DomainErrors\\n/// @notice Errors used all around the Domain logic\\n/// @custom:advice Use distinct naming for the errors if your error monitoring model requires it\\nlibrary DomainErrors {\\n    // =============== Protocol ========================================\\n    error ReentrantCall();\\n    // =============== Deposit ========================================\\n    error TokenNotAllowed(address _caller, address _tokenAddress);\\n    error AmountShouldBePositive(address _caller);\\n    error NotEnoughTokensInExistence();\\n    error TokenNotStaked(address _caller, address _tokenAddress);\\n    error CollateralAlreadyOn();\\n    error CollateralNotEnabled(address _caller, address _tokenAddress);\\n    error CollateralCurrentlyInUse();\\n    // =============== Borrow ========================================\\n    error NoAmountAvailable();\\n    error CannotBorrowAmount(address _caller, uint256 maxAmountToBorrowInUsd, uint256 amountToBeBorrowedInUsd);\\n    error InsufficientProtocolFunds();\\n    error CollateralMismatch();\\n    // =============== Repay ========================================\\n    error TokenNotBorrowed(address _caller, address _tokenAddress);\\n    error CollateralNotInUse();\\n    error InsufficientTokenAmount();\\n    error Error404();\\n    error TokenAlreadyThere();\\n    error NoTokensFound();\\n    // =============== Liquidation ========================================\\n    error SelfLiquidationNotAllowed();\\n    error NotLiquidatable(address _caller);\\n    // =============== LibCalculator ========================================\\n    error AnswerShouldBePositiveNum(uint80 roundId, int256 answer);\\n    error InvalidTime(uint80 roundId, uint256 updatedAt);\\n    error StalePrice(uint80 roundId);\\n    error OracleNotAvailable(IAggregatorV3 dataFeed);\\n    // =============== UI ========================================\\n    error UI__TokenNotAllowed(address _caller, address _tokenAddress);\\n}\\n\",\"keccak256\":\"0x24db49ec47c0dfe9a5ab4164cff3bd3b41df64767e8cebec12fed494cae978e1\",\"license\":\"MIT\"},\"src/contracts/helpers/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n\\npragma solidity =0.8.20;\\n\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\n\\n/// @title DiamondEvents\\n/// @notice Events used all around the Diamond logic\\nlibrary DiamondEvents {\\n    /// @notice Emitted on a successful cut\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\n/// @title DomainEvents\\n/// @notice Events used all around the Domain logic\\nlibrary DomainEvents {\\n    /// @notice Emitted on a successful deposit/stake in the protocol\\n    event Deposit(address _depositedToken, uint256 _depositedAmount, address indexed _depositor);\\n    /// @notice Emitted on a successful collateral activation\\n    event CollateralOn(address _tokenAddress, address _depositor);\\n    /// @notice Emitted on a successful collateral deactivation\\n    event CollateralOff(address _tokenAddress, address _depositor);\\n    /// @notice Emitted on a successful borrow from the protocol\\n    event Borrow(address borrowedToken, uint256 _borrowedAmount, address indexed _borrower);\\n    /// @notice Emitted on a successful repayment to the protocol\\n    event Repay(address borrowedToken, uint256 _repayedAmount, address indexed _borrower);\\n    /// @notice Emitted on a successful withdrawal from the protocol\\n    event Withdraw(address token, uint256 amount, address indexed _depositor);\\n    /// @notice Emitted on a successful liquidation\\n    event Liquidation(address indexed _borrower, address indexed borrowedToken, uint256 keeperReward, address _keeper);\\n}\\n\",\"keccak256\":\"0x6c57d33228666ccd54542c1150d3bd1a4eb099ed89d8ecb34123c292eebfa82d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b4f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a36600461094a565b6001600160e01b03191660009081527f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3023602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d561017b565b6040516100c4919061097b565b6100ea610351565b6040516100c49190610a0d565b61010a610105366004610a8a565b6107c6565b6040516100c49190610ab3565b61016361012536600461094a565b6001600160e01b03191660009081527f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3020602052604090205460601c90565b6040516001600160a01b0390911681526020016100c4565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209061ffff1667ffffffffffffffff8111156101de576101de610ac6565b604051908082528060200260200182016040528015610207578160200160208202803683370190505b50915060008060005b600284015461ffff16821015610349576000818152600185016020526040812054905b6008811015610334578361024681610af2565b600288015490955061ffff168511905061033457600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102d7578a818151811061029c5761029c610b0b565b60200260200101516001600160a01b0316836001600160a01b0316036102c557600191506102d7565b806102cf81610af2565b915050610282565b5080156102e657505050610322565b818a89815181106102f9576102f9610b0b565b6001600160a01b03909216602092830291909101909101528761031b81610af2565b9850505050505b8061032c81610af2565b915050610233565b5050808061034190610af2565b915050610210565b505082525090565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209061ffff1667ffffffffffffffff8111156103b4576103b4610ac6565b6040519080825280602002602001820160405280156103fa57816020015b6040805180820190915260008152606060208201528152602001906001900390816103d25790505b50600282015490925060009061ffff1667ffffffffffffffff81111561042257610422610ac6565b60405190808252806020026020018201604052801561044b578160200160208202803683370190505b50905060008060005b600285015461ffff16821015610753576000818152600186016020526040812054905b600881101561073e578361048a81610af2565b600289015490955061ffff168511905061073e57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105fb57826001600160a01b03168c82815181106104ea576104ea610b0b565b6020026020010151600001516001600160a01b0316036105e957838c828151811061051757610517610b0b565b6020026020010151602001518b838151811061053557610535610b0b565b602002602001015161ffff168151811061055157610551610b0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060fe8a828151811061058757610587610b0b565b602002602001015161ffff1611156105b257604051634e2a65f560e11b815260040160405180910390fd5b8981815181106105c4576105c4610b0b565b6020026020010180518091906105d990610b21565b61ffff16905250600191506105fb565b806105f381610af2565b9150506104c6565b50801561060a5750505061072c565b818b898151811061061d5761061d610b0b565b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff81111561065657610656610ac6565b60405190808252806020026020018201604052801561067f578160200160208202803683370190505b508b898151811061069257610692610b0b565b602002602001015160200181905250828b89815181106106b4576106b4610b0b565b6020026020010151602001516000815181106106d2576106d2610b0b565b60200260200101906001600160e01b03191690816001600160e01b03191681525050600189898151811061070857610708610b0b565b61ffff909216602092830291909101909101528761072581610af2565b9850505050505b8061073681610af2565b915050610477565b5050808061074b90610af2565b915050610454565b5060005b828110156107bb57600084828151811061077357610773610b0b565b602002602001015161ffff169050600087838151811061079557610795610b0b565b6020026020010151602001519050818152505080806107b390610af2565b915050610757565b508185525050505090565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209060009061ffff1667ffffffffffffffff81111561082c5761082c610ac6565b604051908082528060200260200182016040528015610855578160200160208202803683370190505b5092506000805b600284015461ffff16821015610940576000818152600185016020526040812054905b600881101561092b578361089281610af2565b600288015490955061ffff168511905061092b57600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1681900361091657818988815181106108ef576108ef610b0b565b6001600160e01b0319909216602092830291909101909101528661091281610af2565b9750505b5050808061092390610af2565b91505061087f565b5050808061093890610af2565b91505061085c565b5050825250919050565b60006020828403121561095c57600080fd5b81356001600160e01b03198116811461097457600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109bc5783516001600160a01b031683529284019291840191600101610997565b50909695505050505050565b600081518084526020808501945080840160005b83811015610a025781516001600160e01b031916875295820195908201906001016109dc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a7c57888303603f19018552815180516001600160a01b03168452870151878401879052610a69878501826109c8565b9588019593505090860190600101610a34565b509098975050505050505050565b600060208284031215610a9c57600080fd5b81356001600160a01b038116811461097457600080fd5b60208152600061097460208301846109c8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b0457610b04610adc565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818103610b3857610b38610adc565b600101939250505056fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a36600461094a565b6001600160e01b03191660009081527f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3023602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d561017b565b6040516100c4919061097b565b6100ea610351565b6040516100c49190610a0d565b61010a610105366004610a8a565b6107c6565b6040516100c49190610ab3565b61016361012536600461094a565b6001600160e01b03191660009081527f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3020602052604090205460601c90565b6040516001600160a01b0390911681526020016100c4565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209061ffff1667ffffffffffffffff8111156101de576101de610ac6565b604051908082528060200260200182016040528015610207578160200160208202803683370190505b50915060008060005b600284015461ffff16821015610349576000818152600185016020526040812054905b6008811015610334578361024681610af2565b600288015490955061ffff168511905061033457600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102d7578a818151811061029c5761029c610b0b565b60200260200101516001600160a01b0316836001600160a01b0316036102c557600191506102d7565b806102cf81610af2565b915050610282565b5080156102e657505050610322565b818a89815181106102f9576102f9610b0b565b6001600160a01b03909216602092830291909101909101528761031b81610af2565b9850505050505b8061032c81610af2565b915050610233565b5050808061034190610af2565b915050610210565b505082525090565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209061ffff1667ffffffffffffffff8111156103b4576103b4610ac6565b6040519080825280602002602001820160405280156103fa57816020015b6040805180820190915260008152606060208201528152602001906001900390816103d25790505b50600282015490925060009061ffff1667ffffffffffffffff81111561042257610422610ac6565b60405190808252806020026020018201604052801561044b578160200160208202803683370190505b50905060008060005b600285015461ffff16821015610753576000818152600186016020526040812054905b600881101561073e578361048a81610af2565b600289015490955061ffff168511905061073e57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105fb57826001600160a01b03168c82815181106104ea576104ea610b0b565b6020026020010151600001516001600160a01b0316036105e957838c828151811061051757610517610b0b565b6020026020010151602001518b838151811061053557610535610b0b565b602002602001015161ffff168151811061055157610551610b0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060fe8a828151811061058757610587610b0b565b602002602001015161ffff1611156105b257604051634e2a65f560e11b815260040160405180910390fd5b8981815181106105c4576105c4610b0b565b6020026020010180518091906105d990610b21565b61ffff16905250600191506105fb565b806105f381610af2565b9150506104c6565b50801561060a5750505061072c565b818b898151811061061d5761061d610b0b565b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff81111561065657610656610ac6565b60405190808252806020026020018201604052801561067f578160200160208202803683370190505b508b898151811061069257610692610b0b565b602002602001015160200181905250828b89815181106106b4576106b4610b0b565b6020026020010151602001516000815181106106d2576106d2610b0b565b60200260200101906001600160e01b03191690816001600160e01b03191681525050600189898151811061070857610708610b0b565b61ffff909216602092830291909101909101528761072581610af2565b9850505050505b8061073681610af2565b915050610477565b5050808061074b90610af2565b915050610454565b5060005b828110156107bb57600084828151811061077357610773610b0b565b602002602001015161ffff169050600087838151811061079557610795610b0b565b6020026020010151602001519050818152505080806107b390610af2565b915050610757565b508185525050505090565b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c3022546060907f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c30209060009061ffff1667ffffffffffffffff81111561082c5761082c610ac6565b604051908082528060200260200182016040528015610855578160200160208202803683370190505b5092506000805b600284015461ffff16821015610940576000818152600185016020526040812054905b600881101561092b578361089281610af2565b600288015490955061ffff168511905061092b57600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1681900361091657818988815181106108ef576108ef610b0b565b6001600160e01b0319909216602092830291909101909101528661091281610af2565b9750505b5050808061092390610af2565b91505061087f565b5050808061093890610af2565b91505061085c565b5050825250919050565b60006020828403121561095c57600080fd5b81356001600160e01b03198116811461097457600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109bc5783516001600160a01b031683529284019291840191600101610997565b50909695505050505050565b600081518084526020808501945080840160005b83811015610a025781516001600160e01b031916875295820195908201906001016109dc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a7c57888303603f19018552815180516001600160a01b03168452870151878401879052610a69878501826109c8565b9588019593505090860190600101610a34565b509098975050505050505050565b600060208284031215610a9c57600080fd5b81356001600160a01b038116811461097457600080fd5b60208152600061097460208301846109c8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b0457610b04610adc565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818103610b3857610b38610adc565b600101939250505056fea164736f6c6343000814000a",
  "devdoc": {
    "custom:version": "0.0.1",
    "kind": "dev",
    "methods": {
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "{address[]}"
        }
      },
      "facetFunctionSelectors(address)": {
        "returns": {
          "_facetFunctionSelectors": "{bytes4[]}"
        }
      },
      "facets()": {
        "returns": {
          "facets_": "{Facet[]}"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      }
    },
    "title": "DiamondLoupeFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the @return facetAddress_ that supports given @param _functionSelector"
      },
      "facetAddresses()": {
        "notice": "Gets all facet addresses used by a diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors supported by a specific @param _facet"
      },
      "facets()": {
        "notice": "Gets all facets and their selectors"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "notice": "Declares related functions that tell you what functions and facets are provided by the diamond",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}