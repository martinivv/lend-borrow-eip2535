{
  "address": "0xFFEAB444c96EBf2f28CE1Fa04AAB0535042262b1",
  "abi": [
    {
      "inputs": [],
      "name": "CannotReplaceTheSameFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImmutableFunctionDetected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_actionNum",
          "type": "uint8"
        }
      ],
      "name": "IncorrectFacetCutAction",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "MustBeDiamondOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFacetAddress",
          "type": "address"
        }
      ],
      "name": "MustBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSelectorFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutFacet.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCutFacet.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutFacet.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCutFacet.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x761326a9b99c4d8dc362f5aff810f8cd19c4cdcb1a2bad69e9fbad44d2d7435a",
  "receipt": {
    "to": null,
    "from": "0x8dfD6AE6d263262da0E4a2634d899a0085923Fbc",
    "contractAddress": "0xFFEAB444c96EBf2f28CE1Fa04AAB0535042262b1",
    "transactionIndex": 12,
    "gasUsed": "833713",
    "logsBloom": "0x
    "blockHash": "0x7ac6c18b074cd501b3251a00116fd59664bb8c9c9bb23a0179bdf93c817295a8",
    "transactionHash": "0x761326a9b99c4d8dc362f5aff810f8cd19c4cdcb1a2bad69e9fbad44d2d7435a",
    "logs": [],
    "blockNumber": 4624235,
    "cumulativeGasUsed": "3049914",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3ace87e0080de70e4c37f388c527e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotReplaceTheSameFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImmutableFunctionDetected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_actionNum\",\"type\":\"uint8\"}],\"name\":\"IncorrectFacetCutAction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"MustBeDiamondOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFacetAddress\",\"type\":\"address\"}],\"name\":\"MustBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSelectorFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutFacet.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCutFacet.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutFacet.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCutFacet.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:version\":\"0.0.1\",\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"details\":\"Be aware that `_calldata` is executed with delegatecall on the `_init` contract\",\"params\":{\"_calldata\":\"A function call, including function selector and arguments\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute `_calldata`\"}}},\"title\":\"DiamondCutFacet\",\"version\":1},\"userdoc\":{\"events\":{\"DiamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Emitted when facet selectors are modified\"}},\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Adds/replaces/removes any number of functions and optionally executes a function with delegatecall\"}},\"notice\":\"Declares related functions for executing a diamond cut\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/diamond/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":600},\"remappings\":[]},\"sources\":{\"src/contracts/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\nimport {DiamondState, d} from \\\"../libraries/DiamondState.sol\\\";\\nimport {initializeDiamondCut, LibDiamondCut} from \\\"../libraries/logic/LibDiamondCut.sol\\\";\\n\\n/// @title DiamondCutFacet\\n/// @notice Declares related functions for executing a diamond cut\\n/// @custom:version 0.0.1\\ncontract DiamondCutFacet is IDiamondCutFacet {\\n    /// @inheritdoc IDiamondCutFacet\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {\\n        DiamondState storage ds = d();\\n\\n        ds.enforceIsContractOwner();\\n\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        if (selectorCount & 7 > 0) selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            // Calling it in the typical for the protocol way will result in *Stack too deep* error.\\n            // Consider creating better version of the Diamond implementation\\n            (selectorCount, selectorSlot) = LibDiamondCut.addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) ds.selectorCount = uint16(selectorCount);\\n\\n        if (selectorCount & 7 > 0) ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0xa35ef4bd1c2c57d68833fda45dfb717601d325b37f40c5423473afb5df77f71e\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IDiamondCutFacet\\n/// @notice Interface that allows modifications to diamond function selector mapping\\ninterface IDiamondCutFacet {\\n    /// @notice Struct used as a mapping of facet to function selectors\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Available diamond operations\\n    /// @dev Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    /// @notice Emitted when facet selectors are modified\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Adds/replaces/removes any number of functions and optionally executes\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute `_calldata`\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// @dev Be aware that `_calldata` is executed with delegatecall on the `_init` contract\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x3acf0660b6a64d0e066525a914763149d9efe9be92ee16e5ce90acd5a1b09009\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {LibDiamondCut} from \\\"./logic/LibDiamondCut.sol\\\";\\nimport {LibDiamondOwnership} from \\\"./logic/LibDiamondOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibDiamondOwnership for DiamondState global;\\n\\n/// @notice Struct defining the current diamond state\\n/// @custom:advice Consider creating a library with \\\"generic\\\" functions related to `DiamondState`\\nstruct DiamondState {\\n    /// @notice Function selector -> address facet and selector positions\\n    mapping(bytes4 => bytes32) facets;\\n    /// @notice Array of slots of function selectors, each slot holds 8 function selectors\\n    mapping(uint256 => bytes32) selectorSlots;\\n    /// @notice The number of function selectors in `selectorSlots`\\n    uint16 selectorCount;\\n    /// @notice ERC-165 implementation; query if a contract implements an interface\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /// @notice The owner of the Diamond contract\\n    address contractOwner;\\n}\\n\\n// ======================== Pointer ================================================================\\n\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"martinivv.diamond.storage\\\");\\n\\n/// @notice Used as a shared storage\\n/// @return ds Storage pointer to `DiamondState` struct\\nfunction d() pure returns (DiamondState storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n\\n    assembly {\\n        ds.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x134f91bbed10b47ed90a102ccbb176c45e8d67521b28aacf6656d40e084cb3b6\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/logic/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable code-complexity\\n// solhint-disable custom-errors\\n\\npragma solidity =0.8.20;\\n\\nimport {IDiamondCutFacet} from \\\"../../interfaces/IDiamondCutFacet.sol\\\";\\nimport {DiamondState, d} from \\\"../DiamondState.sol\\\";\\n// Consider adding remappings\\nimport {DiamondEvents} from \\\"../../../helpers/Events.sol\\\";\\nimport {DiamondErrors} from \\\"../../../helpers/Errors.sol\\\";\\nimport {DiamondConstants} from \\\"../../../helpers/Constants.sol\\\";\\n\\n/// @notice See {diamondCut}'s @notice\\n/// @custom:security Will behave like an internal function of the calling contract\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) return;\\n\\n    LibDiamondCut.enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n        if (error.length > 0) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(error)\\n                revert(add(32, error), returndata_size)\\n            }\\n        } else {\\n            revert DiamondErrors.InitializationFunctionReverted(_init, _calldata);\\n        }\\n    }\\n}\\n\\n/// @title LibDiamondCut\\n/// @notice Internal function versions of `DiamondCutFacet` ones\\n/// @dev This code is almost the same as the external `DiamondCutFacet` one,\\n/// except it is using `Facet[] memory _diamondCut` instead of\\n/// `Facet[] calldata _diamondCut`. The code is duplicated to prevent\\n/// copying calldata to memory which causes an error for a two dimensional array\\nlibrary LibDiamondCut {\\n    /// @notice Adds/replaces/removes any number of functions and optionally executes\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute `_calldata`\\n    /// @param _calldata A function call, including function selector and arguments\\n    /// @dev Be aware that `_calldata` is executed with delegatecall on the `_init` contract\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        uint256 originalSelectorCount = self.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n\\n        if (selectorCount & 7 > 0) selectorSlot = self.selectorSlots[selectorCount >> 3];\\n\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n\\n        if (selectorCount != originalSelectorCount) self.selectorCount = uint16(selectorCount);\\n\\n        if (selectorCount & 7 > 0) self.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\n        emit DiamondEvents.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    /// @notice See {diamondCut}'s @notice\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCutFacet.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondState storage self = d();\\n\\n        if (_selectors.length < 1) revert DiamondErrors.NoSelectorFound();\\n\\n        if (_action == IDiamondCutFacet.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = self.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0)) revert DiamondErrors.FunctionAlreadyExists();\\n\\n                self.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                _selectorSlot =\\n                    (_selectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                if (selectorInSlotPosition == 224) {\\n                    self.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCutFacet.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = self.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(this)) revert DiamondErrors.ImmutableFunctionDetected();\\n\\n                if (oldFacetAddress == _newFacetAddress) revert DiamondErrors.CannotReplaceTheSameFunction();\\n\\n                if (oldFacetAddress == address(0)) revert DiamondErrors.FunctionDoesNotExist();\\n\\n                self.facets[selector] = (oldFacet & DiamondConstants.CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCutFacet.FacetCutAction.Remove) {\\n            if (_newFacetAddress != address(0)) revert DiamondErrors.MustBeZeroAddress(_newFacetAddress);\\n\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    _selectorSlot = self.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = self.facets[selector];\\n                    if (address(bytes20(oldFacet)) == address(0)) revert DiamondErrors.FunctionDoesNotExist();\\n\\n                    if (address(bytes20(oldFacet)) == address(this)) revert DiamondErrors.ImmutableFunctionDetected();\\n\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\n                    if (lastSelector != selector) {\\n                        self.facets[lastSelector] =\\n                            (oldFacet & DiamondConstants.CLEAR_ADDRESS_MASK) |\\n                            bytes20(self.facets[lastSelector]);\\n                    }\\n\\n                    delete self.facets[selector];\\n\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = self.selectorSlots[oldSelectorsSlotCount];\\n\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    self.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(DiamondConstants.CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete self.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert DiamondErrors.IncorrectFacetCutAction(uint8(_action));\\n        }\\n\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    /// @notice Ensures that the @param _contract has code, otherwise throws an @param _errorMessage\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x35d9df95b89c58f00c599f6fea6b6d7d7192428a16e2eb7f6362e6765ac68844\",\"license\":\"MIT\"},\"src/contracts/diamond/libraries/logic/LibDiamondOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\nimport {DiamondErrors} from \\\"../../../helpers/Errors.sol\\\";\\n\\n/// @title LibDiamondOwnership\\n/// @notice Library collection of diamond ownership functions\\nlibrary LibDiamondOwnership {\\n    /// @notice Emitted when diamond owner is updated\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Updates the diamond owner to @param _newOwner's address\\n    function setContractOwner(DiamondState storage self, address _newOwner) internal {\\n        address previousOwner = self.contractOwner;\\n        self.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    /// @notice Returns the diamond @return contractOwner_'s address\\n    function getContractOwner(DiamondState storage self) internal view returns (address contractOwner_) {\\n        contractOwner_ = self.contractOwner;\\n    }\\n\\n    /// @notice Checks if `msg.sender` is the diamond owner\\n    function enforceIsContractOwner(DiamondState storage self) internal view {\\n        if (msg.sender != self.contractOwner) revert DiamondErrors.MustBeDiamondOwner(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xd3f4d72fea315ac0781dfc55f5f2b9d8e11262d360f7578ef591228cc385b8d0\",\"license\":\"MIT\"},\"src/contracts/domain/interfaces/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @title IAggregatorV3\\n/// @notice This interface enables utilization of Chainlink data feeds\\ninterface IAggregatorV3 {\\n    /// @notice Returns the number of decimals in the response\\n    /// @return {uint8}\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Gets data from the latest round\\n    /// @return roundId The round ID\\n    /// @return answer The data that this specific feed provides\\n    /// @return startedAt Timestamp of when the round started\\n    /// @return updatedAt Timestamp of when the round was updated\\n    /// @return answeredInRound Deprecated. Previously used when answers could take multiple rounds to be computed\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xf6e216dc33b61ef00f056ccd84e6a9ced64db2dd98a604cafbc5193978485bd2\",\"license\":\"MIT\"},\"src/contracts/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n// solhint-disable state-visibility\\n\\npragma solidity =0.8.20;\\n\\n/// @title DiamondConstants\\n/// @notice Constants used all around the Diamond logic\\nlibrary DiamondConstants {\\n    /// @notice Diamond's property\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    /// @notice Diamond's property\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n}\\n\\n/// @title DomainConstants\\n/// @notice Constants used all around the Domain logic\\nlibrary DomainConstants {\\n    /// @notice Used for handling calculations with basis points\\n    uint256 constant BASIS_POINTS = 10_000;\\n    /// @notice One day in seconds\\n    uint256 constant SECONDS_PER_DAY = 1 days;\\n    /// @notice Days in a year. Yeap years are ignored\\n    uint256 constant DAYS_PER_YEAR = 365;\\n    /// @notice ReentrancyGuard's property\\n    uint256 constant _NOT_ENTERED = 1;\\n    /// @notice ReentrancyGuard's property\\n    uint256 constant _ENTERED = 2;\\n}\\n\",\"keccak256\":\"0xa91d9468a2376c940149c6d99e6cacd92a78bf16d90d3fae43dbb1789f9b1028\",\"license\":\"MIT\"},\"src/contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n\\npragma solidity =0.8.20;\\n\\nimport {IAggregatorV3} from \\\"../domain/interfaces/IAggregatorV3.sol\\\";\\n\\n/// @title DiamondErrors\\n/// @notice Errors used all around the Diamond logic\\nlibrary DiamondErrors {\\n    error FunctionDoesNotExist();\\n    error TooManyFunctionsInAFacet();\\n    error NoZeroAddressOwner();\\n    error NoSelectorFound();\\n    error FunctionAlreadyExists();\\n    error ImmutableFunctionDetected();\\n    error CannotReplaceTheSameFunction();\\n    error MustBeZeroAddress(address _newFacetAddress);\\n    error IncorrectFacetCutAction(uint8 _actionNum);\\n    error InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n    error MustBeDiamondOwner(address _caller);\\n    error TransferFailed();\\n}\\n\\n/// @title DomainErrors\\n/// @notice Errors used all around the Domain logic\\n/// @custom:advice Use distinct naming for the errors if your error monitoring model requires it\\nlibrary DomainErrors {\\n    // =============== Protocol ========================================\\n    error ReentrantCall();\\n    // =============== Deposit ========================================\\n    error TokenNotAllowed(address _caller, address _tokenAddress);\\n    error AmountShouldBePositive(address _caller);\\n    error NotEnoughTokensInExistence();\\n    error TokenNotStaked(address _caller, address _tokenAddress);\\n    error CollateralAlreadyOn();\\n    error CollateralNotEnabled(address _caller, address _tokenAddress);\\n    error CollateralCurrentlyInUse();\\n    // =============== Borrow ========================================\\n    error NoAmountAvailable();\\n    error CannotBorrowAmount(address _caller, uint256 maxAmountToBorrowInUsd, uint256 amountToBeBorrowedInUsd);\\n    error InsufficientProtocolFunds();\\n    error CollateralMismatch();\\n    // =============== Repay ========================================\\n    error TokenNotBorrowed(address _caller, address _tokenAddress);\\n    error CollateralNotInUse();\\n    error InsufficientTokenAmount();\\n    error Error404();\\n    error TokenAlreadyThere();\\n    error NoTokensFound();\\n    // =============== Liquidation ========================================\\n    error SelfLiquidationNotAllowed();\\n    error NotLiquidatable(address _caller);\\n    // =============== LibCalculator ========================================\\n    error AnswerShouldBePositiveNum(uint80 roundId, int256 answer);\\n    error InvalidTime(uint80 roundId, uint256 updatedAt);\\n    error StalePrice(uint80 roundId);\\n    error OracleNotAvailable(IAggregatorV3 dataFeed);\\n    // =============== UI ========================================\\n    error UI__TokenNotAllowed(address _caller, address _tokenAddress);\\n}\\n\",\"keccak256\":\"0x24db49ec47c0dfe9a5ab4164cff3bd3b41df64767e8cebec12fed494cae978e1\",\"license\":\"MIT\"},\"src/contracts/helpers/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\n\\npragma solidity =0.8.20;\\n\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\n\\n/// @title DiamondEvents\\n/// @notice Events used all around the Diamond logic\\nlibrary DiamondEvents {\\n    /// @notice Emitted on a successful cut\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\n/// @title DomainEvents\\n/// @notice Events used all around the Domain logic\\nlibrary DomainEvents {\\n    /// @notice Emitted on a successful deposit/stake in the protocol\\n    event Deposit(address _depositedToken, uint256 _depositedAmount, address indexed _depositor);\\n    /// @notice Emitted on a successful collateral activation\\n    event CollateralOn(address _tokenAddress, address _depositor);\\n    /// @notice Emitted on a successful collateral deactivation\\n    event CollateralOff(address _tokenAddress, address _depositor);\\n    /// @notice Emitted on a successful borrow from the protocol\\n    event Borrow(address borrowedToken, uint256 _borrowedAmount, address indexed _borrower);\\n    /// @notice Emitted on a successful repayment to the protocol\\n    event Repay(address borrowedToken, uint256 _repayedAmount, address indexed _borrower);\\n    /// @notice Emitted on a successful withdrawal from the protocol\\n    event Withdraw(address token, uint256 amount, address indexed _depositor);\\n    /// @notice Emitted on a successful liquidation\\n    event Liquidation(address indexed _borrower, address indexed borrowedToken, uint256 keeperReward, address _keeper);\\n}\\n\",\"keccak256\":\"0x6c57d33228666ccd54542c1150d3bd1a4eb099ed89d8ecb34123c292eebfa82d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e1e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e36600461094e565b610045565b005b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c302061006f81610254565b600281015461ffff81169081906000906007161561009f5750600381901c60009081526001840160205260409020545b60005b8881101561018c5761017f83838c8c858181106100c1576100c1610a00565b90506020028101906100d39190610a16565b6100e1906020810190610a36565b8d8d868181106100f3576100f3610a00565b90506020028101906101059190610a16565b610116906040810190602001610a67565b8e8e8781811061012857610128610a00565b905060200281019061013a9190610a16565b610148906040810190610a82565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061028b92505050565b90935091506001016100a2565b508282146101a85760028401805461ffff191661ffff84161790555b60078216156101ca57600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738989898989604051610201959493929190610b5b565b60405180910390a16102498787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107fc92505050565b505050505050505050565b60048101546001600160a01b031633146102885760405163d0d827f160e01b81523360048201526024015b60405180910390fd5b50565b600080807f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c302090506001845110156102d5576040516346d699e360e11b815260040160405180910390fd5b60008560028111156102e9576102e9610acc565b036104075761031086604051806060016040528060248152602001610d9e602491396108c8565b60005b845181101561040157600085828151811061033057610330610a00565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561037c5760405163a023275d60e01b815260040160405180910390fd5b6001600160e01b031980831660008181526020879052604090206bffffffffffffffffffffffff1960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a8190036103e55760038c901c600090815260018601602052604081209b909b555b8b6103ef81610c9e565b9c505060019093019250610313915050565b506107f0565b600185600281111561041b5761041b610acc565b036105545761044286604051806060016040528060288152602001610dea602891396108c8565b60005b845181101561040157600085828151811061046257610462610a00565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c3081036104b05760405163dc90201360e01b815260040160405180910390fd5b896001600160a01b0316816001600160a01b0316036104e2576040516379cc663760e01b815260040160405180910390fd5b6001600160a01b03811661050957604051631535ac5f60e31b815260040160405180910390fd5b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166bffffffffffffffffffffffff1960608a901b16179055600101610445565b600285600281111561056857610568610acc565b036107bf576001600160a01b038616156105a05760405163136f5a4b60e31b81526001600160a01b038716600482015260240161027f565b600388901c6007891660005b865181101561079f5760008a90036105e857826105c881610cb7565b60008181526001870160205260409020549b509350600792506105f69050565b816105f281610cb7565b9250505b6000806000808a858151811061060e5761060e610a00565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61065957604051631535ac5f60e31b815260040160405180910390fd5b30606082901c0361067d5760405163dc90201360e01b815260040160405180910390fd5b600587901b8f901b94506001600160e01b0319808616908316146106d8576001600160e01b03198516600090815260208a90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff83161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e016905085821461073d576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610776565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198e16179c505b8460000361079457600086815260018801602052604081208190559c505b5050506001016105ac565b50806107ac836008610cce565b6107b69190610ceb565b995050506107f0565b8460028111156107d1576107d1610acc565b604051633ff4d20f60e11b815260ff909116600482015260240161027f565b50959694955050505050565b6001600160a01b03821661080e575050565b61083082604051806060016040528060288152602001610dc2602891396108c8565b600080836001600160a01b03168360405161084b9190610d22565b600060405180830381855af49150503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b5091509150816108c2578051156108a55780518082602001fd5b838360405163192105d760e01b815260040161027f929190610d60565b50505050565b813b81816108c25760405162461bcd60e51b815260040161027f9190610d8a565b80356001600160a01b038116811461090057600080fd5b919050565b60008083601f84011261091757600080fd5b50813567ffffffffffffffff81111561092f57600080fd5b60208301915083602082850101111561094757600080fd5b9250929050565b60008060008060006060868803121561096657600080fd5b853567ffffffffffffffff8082111561097e57600080fd5b818801915088601f83011261099257600080fd5b8135818111156109a157600080fd5b8960208260051b85010111156109b657600080fd5b602083019750809650506109cc602089016108e9565b945060408801359150808211156109e257600080fd5b506109ef88828901610905565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610a2c57600080fd5b9190910192915050565b600060208284031215610a4857600080fd5b610a51826108e9565b9392505050565b80356003811061090057600080fd5b600060208284031215610a7957600080fd5b610a5182610a58565b6000808335601e19843603018112610a9957600080fd5b83018035915067ffffffffffffffff821115610ab457600080fd5b6020019150600581901b360382131561094757600080fd5b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610b265782356001600160e01b03198116808214610b13578384fd5b8952509683019691830191600101610af3565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610c5557878303607f190184528135368e9003605e19018112610ba057600080fd5b8d016001600160a01b03610bb3826108e9565b1684526020610bc3818301610a58565b60038110610be157634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610bfe57600080fd5b90920181810192903567ffffffffffffffff811115610c1c57600080fd5b80891b3603841315610c2d57600080fd5b8982880152610c3f8a88018286610ae2565b9783019796505050929092019150600101610b7a565b50506001600160a01b03891660208701528581036040870152610c7981888a610b32565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610cb057610cb0610c88565b5060010190565b600081610cc657610cc6610c88565b506000190190565b8082028115828204841417610ce557610ce5610c88565b92915050565b80820180821115610ce557610ce5610c88565b60005b83811015610d19578181015183820152602001610d01565b50506000910152565b60008251610a2c818460208701610cfe565b60008151808452610d4c816020860160208601610cfe565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201526000610d826040830184610d34565b949350505050565b602081526000610a516020830184610d3456fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e36600461094e565b610045565b005b7f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c302061006f81610254565b600281015461ffff81169081906000906007161561009f5750600381901c60009081526001840160205260409020545b60005b8881101561018c5761017f83838c8c858181106100c1576100c1610a00565b90506020028101906100d39190610a16565b6100e1906020810190610a36565b8d8d868181106100f3576100f3610a00565b90506020028101906101059190610a16565b610116906040810190602001610a67565b8e8e8781811061012857610128610a00565b905060200281019061013a9190610a16565b610148906040810190610a82565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061028b92505050565b90935091506001016100a2565b508282146101a85760028401805461ffff191661ffff84161790555b60078216156101ca57600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738989898989604051610201959493929190610b5b565b60405180910390a16102498787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107fc92505050565b505050505050505050565b60048101546001600160a01b031633146102885760405163d0d827f160e01b81523360048201526024015b60405180910390fd5b50565b600080807f33db93811595d149127b48476bd7ca575d33b2af3516f373596199e9ec7c302090506001845110156102d5576040516346d699e360e11b815260040160405180910390fd5b60008560028111156102e9576102e9610acc565b036104075761031086604051806060016040528060248152602001610d9e602491396108c8565b60005b845181101561040157600085828151811061033057610330610a00565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561037c5760405163a023275d60e01b815260040160405180910390fd5b6001600160e01b031980831660008181526020879052604090206bffffffffffffffffffffffff1960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a8190036103e55760038c901c600090815260018601602052604081209b909b555b8b6103ef81610c9e565b9c505060019093019250610313915050565b506107f0565b600185600281111561041b5761041b610acc565b036105545761044286604051806060016040528060288152602001610dea602891396108c8565b60005b845181101561040157600085828151811061046257610462610a00565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c3081036104b05760405163dc90201360e01b815260040160405180910390fd5b896001600160a01b0316816001600160a01b0316036104e2576040516379cc663760e01b815260040160405180910390fd5b6001600160a01b03811661050957604051631535ac5f60e31b815260040160405180910390fd5b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166bffffffffffffffffffffffff1960608a901b16179055600101610445565b600285600281111561056857610568610acc565b036107bf576001600160a01b038616156105a05760405163136f5a4b60e31b81526001600160a01b038716600482015260240161027f565b600388901c6007891660005b865181101561079f5760008a90036105e857826105c881610cb7565b60008181526001870160205260409020549b509350600792506105f69050565b816105f281610cb7565b9250505b6000806000808a858151811061060e5761060e610a00565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61065957604051631535ac5f60e31b815260040160405180910390fd5b30606082901c0361067d5760405163dc90201360e01b815260040160405180910390fd5b600587901b8f901b94506001600160e01b0319808616908316146106d8576001600160e01b03198516600090815260208a90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff83161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e016905085821461073d576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610776565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198e16179c505b8460000361079457600086815260018801602052604081208190559c505b5050506001016105ac565b50806107ac836008610cce565b6107b69190610ceb565b995050506107f0565b8460028111156107d1576107d1610acc565b604051633ff4d20f60e11b815260ff909116600482015260240161027f565b50959694955050505050565b6001600160a01b03821661080e575050565b61083082604051806060016040528060288152602001610dc2602891396108c8565b600080836001600160a01b03168360405161084b9190610d22565b600060405180830381855af49150503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b5091509150816108c2578051156108a55780518082602001fd5b838360405163192105d760e01b815260040161027f929190610d60565b50505050565b813b81816108c25760405162461bcd60e51b815260040161027f9190610d8a565b80356001600160a01b038116811461090057600080fd5b919050565b60008083601f84011261091757600080fd5b50813567ffffffffffffffff81111561092f57600080fd5b60208301915083602082850101111561094757600080fd5b9250929050565b60008060008060006060868803121561096657600080fd5b853567ffffffffffffffff8082111561097e57600080fd5b818801915088601f83011261099257600080fd5b8135818111156109a157600080fd5b8960208260051b85010111156109b657600080fd5b602083019750809650506109cc602089016108e9565b945060408801359150808211156109e257600080fd5b506109ef88828901610905565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610a2c57600080fd5b9190910192915050565b600060208284031215610a4857600080fd5b610a51826108e9565b9392505050565b80356003811061090057600080fd5b600060208284031215610a7957600080fd5b610a5182610a58565b6000808335601e19843603018112610a9957600080fd5b83018035915067ffffffffffffffff821115610ab457600080fd5b6020019150600581901b360382131561094757600080fd5b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610b265782356001600160e01b03198116808214610b13578384fd5b8952509683019691830191600101610af3565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610c5557878303607f190184528135368e9003605e19018112610ba057600080fd5b8d016001600160a01b03610bb3826108e9565b1684526020610bc3818301610a58565b60038110610be157634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610bfe57600080fd5b90920181810192903567ffffffffffffffff811115610c1c57600080fd5b80891b3603841315610c2d57600080fd5b8982880152610c3f8a88018286610ae2565b9783019796505050929092019150600101610b7a565b50506001600160a01b03891660208701528581036040870152610c7981888a610b32565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610cb057610cb0610c88565b5060010190565b600081610cc657610cc6610c88565b506000190190565b8082028115828204841417610ce557610ce5610c88565b92915050565b80820180821115610ce557610ce5610c88565b60005b83811015610d19578181015183820152602001610d01565b50506000910152565b60008251610a2c818460208701610cfe565b60008151808452610d4c816020860160208601610cfe565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201526000610d826040830184610d34565b949350505050565b602081526000610a516020830184610d3456fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a164736f6c6343000814000a",
  "devdoc": {
    "custom:version": "0.0.1",
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "details": "Be aware that `_calldata` is executed with delegatecall on the `_init` contract",
        "params": {
          "_calldata": "A function call, including function selector and arguments",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute `_calldata`"
        }
      }
    },
    "title": "DiamondCutFacet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Emitted when facet selectors are modified"
      }
    },
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Adds/replaces/removes any number of functions and optionally executes a function with delegatecall"
      }
    },
    "notice": "Declares related functions for executing a diamond cut",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}